{"ast":null,"code":"import _slicedToArray from \"/Users/Jeremi/Documents/#Dev/#Code/DiscordComponentRepo/discordcomp/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"/Users/Jeremi/Documents/#Dev/#Code/DiscordComponentRepo/discordcomp/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/Jeremi/Documents/#Dev/#Code/DiscordComponentRepo/discordcomp/src/pages/Jeremii.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from \"react\";\nimport moment from \"moment\";\nimport { Button, Input, List } from \"semantic-ui-react\";\n\nfunction Discode({\n  comments,\n  editComment,\n  state,\n  setState,\n  deleteComment\n}) {\n  return React.createElement(List, {\n    divided: true,\n    relaxed: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, comments.map(comment => {\n    if (comment.id === state.commentId) {\n      return React.createElement(List.Item, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 12\n        },\n        __self: this\n      }, React.createElement(List.Content, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 13\n        },\n        __self: this\n      }, React.createElement(List.Header, {\n        as: \"a\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14\n        },\n        __self: this\n      }, React.createElement(Input, {\n        value: state.editValue,\n        onChange: (event, {\n          value\n        }) => {\n          setState(_objectSpread({}, state, {\n            value: value\n          }));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15\n        },\n        __self: this\n      }), React.createElement(Button, {\n        primary: true,\n        onClick: editComment,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, \"Save\"))));\n    }\n\n    return React.createElement(List.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, React.createElement(List.Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, React.createElement(List.Header, {\n      as: \"a\",\n      onClick: () => {\n        setState({\n          commentId: comment.id,\n          value: comment.text\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, comment.text + \" \" + moment(comment.time, \"ss\").fromNow()), React.createElement(Button, {\n      primary: true,\n      onClick: () => deleteComment(comment.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, \"Delete\")));\n  }));\n}\n\nfunction Jeremii() {\n  const _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        inputText = _useState2[0],\n        setInputText = _useState2[1];\n\n  const _useState3 = useState({\n    commentId: null,\n    value: null\n  }),\n        _useState4 = _slicedToArray(_useState3, 2),\n        state = _useState4[0],\n        setState = _useState4[1];\n\n  const _useState5 = useState([{\n    id: 1,\n    text: \"Oh, hai.\",\n    time: moment(new Date()).subtract(\"1\", \"hours\")\n  }, {\n    id: 2,\n    text: \"Oh, hei.\",\n    time: moment(new Date()).subtract(\"10\", \"mins\")\n  }]),\n        _useState6 = _slicedToArray(_useState5, 2),\n        comments = _useState6[0],\n        setComments = _useState6[1];\n\n  const addComment = e => {\n    e.preventDefault();\n    const newComment = {\n      id: new Date().getMilliseconds(),\n      text: inputText,\n      time: new Date()\n    };\n    setComments([...comments, newComment]);\n  };\n\n  const editComment = () => {\n    const updatedComments = comments.map(comment => {\n      if (comment.id === state.commentId) {\n        comment.text = state.value;\n        setState({\n          commentId: null,\n          value: null\n        });\n      }\n\n      return comment;\n    }); // Update our todo state store\n\n    setComments(updatedComments);\n  };\n\n  const deleteComment = id => {\n    const newComments = comments.filter(x => x.id !== id);\n    setComments(newComments);\n  };\n\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, \"Dis-code\")), React.createElement(\"body\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, React.createElement(Discode, {\n    deleteComment: deleteComment,\n    editComment: editComment,\n    comments: comments,\n    state: state,\n    setState: setState,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }), React.createElement(\"form\", {\n    method: \"POST\",\n    onSubmit: addComment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Say something...\",\n    value: inputText,\n    onChange: e => setInputText(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }), React.createElement(Button, {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, \"Send\"))));\n}\n\nexport default Jeremii;","map":{"version":3,"sources":["/Users/Jeremi/Documents/#Dev/#Code/DiscordComponentRepo/discordcomp/src/pages/Jeremii.js"],"names":["React","useState","moment","Button","Input","List","Discode","comments","editComment","state","setState","deleteComment","map","comment","id","commentId","editValue","event","value","text","time","fromNow","Jeremii","inputText","setInputText","Date","subtract","setComments","addComment","e","preventDefault","newComment","getMilliseconds","updatedComments","newComments","filter","x","target"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport moment from \"moment\";\n\nimport { Button, Input, List } from \"semantic-ui-react\";\n\nfunction Discode({ comments, editComment, state, setState, deleteComment }) {\n  return (\n    <List divided relaxed>\n      {comments.map(comment => {\n        if (comment.id === state.commentId) {\n          return (\n            <List.Item>\n              <List.Content>\n                <List.Header as=\"a\">\n                  <Input\n                    value={state.editValue}\n                    onChange={(event, { value }) => {\n                      setState({\n                        ...state,\n                        value: value\n                      });\n                    }}\n                  />\n                  <Button primary onClick={editComment}>\n                    Save\n                  </Button>\n                </List.Header>\n              </List.Content>\n            </List.Item>\n          );\n        }\n\n        return (\n          <List.Item>\n            <List.Content>\n              <List.Header\n                as=\"a\"\n                onClick={() => {\n                  setState({\n                    commentId: comment.id,\n                    value: comment.text\n                  });\n                }}\n              >\n                {comment.text + \" \" + moment(comment.time, \"ss\").fromNow()}\n              </List.Header>\n              <Button primary onClick={() => deleteComment(comment.id)}>\n                Delete\n              </Button>\n            </List.Content>\n          </List.Item>\n        );\n      })}\n    </List>\n  );\n}\n\nfunction Jeremii() {\n  const [inputText, setInputText] = useState(\"\");\n  const [state, setState] = useState({\n    commentId: null,\n    value: null\n  });\n  const [comments, setComments] = useState([\n    {\n      id: 1,\n      text: \"Oh, hai.\",\n      time: moment(new Date()).subtract(\"1\", \"hours\")\n    },\n    {\n      id: 2,\n      text: \"Oh, hei.\",\n      time: moment(new Date()).subtract(\"10\", \"mins\")\n    }\n  ]);\n  const addComment = e => {\n    e.preventDefault();\n    const newComment = {\n      id: new Date().getMilliseconds(),\n      text: inputText,\n      time: new Date()\n    };\n    setComments([...comments, newComment]);\n  };\n  const editComment = () => {\n    const updatedComments = comments.map(comment => {\n      if (comment.id === state.commentId) {\n        comment.text = state.value;\n        setState({\n          commentId: null,\n          value: null\n        });\n      }\n      return comment;\n    });\n\n    // Update our todo state store\n    setComments(updatedComments);\n  };\n  const deleteComment = id => {\n    const newComments = comments.filter(x => x.id !== id);\n    setComments(newComments);\n  };\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Dis-code</h1>\n      </header>\n      <body>\n        <Discode\n          deleteComment={deleteComment}\n          editComment={editComment}\n          comments={comments}\n          state={state}\n          setState={setState}\n        />\n        <form method=\"POST\" onSubmit={addComment}>\n          <input\n            type=\"text\"\n            placeholder=\"Say something...\"\n            value={inputText}\n            onChange={e => setInputText(e.target.value)}\n          />\n          <Button type=\"submit\">Send</Button>\n        </form>\n      </body>\n    </div>\n  );\n}\n\nexport default Jeremii;\n"]},"metadata":{},"sourceType":"module"}